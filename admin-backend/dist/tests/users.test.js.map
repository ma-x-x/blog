{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport { Sequelize } from 'sequelize';\nimport request from 'supertest';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UserRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response findAll users', async () => {\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findAll = jest.fn().mockReturnValue([\n        {\n          id: 1,\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          id: 2,\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          id: 3,\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      (Sequelize as any).authenticate = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne user', async () => {\n      const username = 1;\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByPk = jest.fn().mockReturnValue({\n        id: 1,\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (Sequelize as any).authenticate = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer())\n        .get(`${usersRoute.path}/${username}`)\n        .expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create user', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4!',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        id: 1,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (Sequelize as any).authenticate = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer())\n        .post(`${usersRoute.path}`)\n        .send(userData)\n        .expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update user', async () => {\n      const username = 1;\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: '1q2w3e4r!',\n      };\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByPk = jest.fn().mockReturnValue({\n        id: username,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n      users.update = jest.fn().mockReturnValue([1]);\n      users.findByPk = jest.fn().mockReturnValue({\n        id: username,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (Sequelize as any).authenticate = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer())\n        .put(`${usersRoute.path}/${username}`)\n        .send(userData)\n        .expect(200);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete user', async () => {\n      const username = 1;\n\n      const usersRoute = new UserRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByPk = jest.fn().mockReturnValue({\n        id: username,\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (Sequelize as any).authenticate = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer())\n        .delete(`${usersRoute.path}/${username}`)\n        .expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","UserRoute","users","usersController","userService","findAll","jest","fn","mockReturnValue","id","email","password","bcrypt","hash","Sequelize","authenticate","app","App","request","getServer","get","path","expect","username","findByPk","userData","findOne","create","post","send","update","put","delete"],"mappings":"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"}