{"version":3,"sources":["../../src/services/roles.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport DB from '@databases';\nimport { CreateRoleDto } from '@dtos/roles.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { Role } from '@interfaces/roles.interface';\nimport { isEmpty } from '@utils/util';\nimport { Op } from 'sequelize';\n\nclass RoleService {\n  public roles = DB.Roles;\n\n  public async findRolesByUserId(userId: number): Promise<Role[]> {\n    // @ts-ignore\n    const roles: number[] = (await this.userRole.findAll({ attributes: ['roleId'], where: { userId } })) as number[];\n    const allRole: Role[] = await this.roles.findAll({\n      attributes: ['id', 'name', 'code'],\n      where: {\n        id: { [Op.in]: roles },\n      },\n    });\n    return allRole;\n  }\n\n  public async findAllRole(): Promise<Role[]> {\n    const allRole: Role[] = await this.roles.findAll({\n      order: [['id', 'DESC']],\n    });\n    return allRole;\n  }\n\n  public async findRoleById(roleId: string): Promise<Role> {\n    if (isEmpty(roleId)) throw new HttpException(400, '参数roleId不能为空');\n\n    const findRole: Role = await this.roles.findOne({ where: { id: roleId } });\n    if (!findRole) throw new HttpException(409, '角色Id不存在');\n\n    return findRole;\n  }\n\n  public async createRole(roleData: CreateRoleDto): Promise<Role> {\n    if (isEmpty(roleData)) throw new HttpException(400, '参数不能为空');\n\n    const findRole: Role = await this.roles.findOne({\n      where: { name: roleData.name },\n    });\n    if (findRole) throw new HttpException(409, `角色名称已存在`);\n\n    const createRoleData: Role = await this.roles.create(roleData);\n    return createRoleData;\n  }\n\n  public async updateRole(roleId: number, roleData: CreateRoleDto): Promise<Role> {\n    if (isEmpty(roleData)) throw new HttpException(400, '参数不能为空');\n\n    const findRole: Role = await this.roles.findByPk(roleId);\n    if (!findRole) throw new HttpException(409, '角色不存在');\n\n    await this.roles.update(roleData, { where: { id: roleId } });\n\n    const updateRole: Role = await this.roles.findByPk(roleId);\n    return updateRole;\n  }\n\n  public async deleteRole(roleId: number): Promise<Role> {\n    if (isEmpty(roleId)) throw new HttpException(400, '参数roleId不能为空');\n\n    const findRole: Role = await this.roles.findByPk(roleId);\n    if (!findRole) throw new HttpException(409, '角色不存在');\n\n    await this.roles.destroy({ where: { id: roleId } });\n\n    return findRole;\n  }\n}\n\nexport default RoleService;\n"],"names":["RoleService","findRolesByUserId","userId","roles","userRole","findAll","attributes","where","allRole","id","Op","in","findAllRole","order","findRoleById","roleId","isEmpty","HttpException","findRole","findOne","createRole","roleData","name","createRoleData","create","updateRole","findByPk","update","deleteRole","destroy","DB","Roles"],"mappings":"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"}