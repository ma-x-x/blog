{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport DB from '@databases';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = DB.Users;\n  public roles = DB.Roles;\n\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await this.users.findAll({\n      attributes: { exclude: ['password'] },\n      order: [['id', 'DESC']],\n    });\n    return allUser;\n  }\n\n  // 查询登录用户信息\n  public async findCurrentUser(userId: number): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"You're not userId\");\n\n    const findUser: User = await this.users.findOne({\n      attributes: {\n        exclude: ['password'],\n      },\n      include: [\n        {\n          model: DB.Roles,\n          as: 'roles',\n          through: {\n            attributes: [],\n          },\n        },\n      ],\n      where: { id: 1 },\n    });\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    return findUser;\n  }\n\n  // 查询用户信息\n  public async findUserById(username: string): Promise<User> {\n    if (isEmpty(username)) throw new HttpException(400, \"You're not username\");\n\n    const findUser: User = await this.users.findOne({ attributes: { exclude: ['password'] }, where: { username } });\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    return findUser;\n  }\n\n  // 查询用户菜单信息\n  public async findMenusById(userId: number) {\n    const findUser: User = await this.users.findOne({\n      include: [\n        {\n          model: DB.Roles,\n          as: 'roles',\n          through: {\n            attributes: [],\n          },\n          include: [\n            {\n              model: DB.Menus,\n              through: { attributes: [] },\n            },\n          ],\n        },\n      ],\n      where: { id: 1 },\n    });\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\n\n    const findUser: User = await this.users.findOne({\n      where: { email: userData.email },\n    });\n    if (findUser) throw new HttpException(409, `You're email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({\n      ...userData,\n      password: hashedPassword,\n    });\n    return createUserData;\n  }\n\n  public async updateUser(username: number, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\n\n    const findUser: User = await this.users.findByPk(username);\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    await this.users.update({ ...userData, password: hashedPassword }, { where: { id: username } });\n\n    const updateUser: User = await this.users.findByPk(username);\n    return updateUser;\n  }\n\n  public async deleteUser(username: number): Promise<User> {\n    if (isEmpty(username)) throw new HttpException(400, \"You're not username\");\n\n    const findUser: User = await this.users.findByPk(username);\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    await this.users.destroy({ where: { id: username } });\n\n    return findUser;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","allUser","users","findAll","attributes","exclude","order","findCurrentUser","userId","isEmpty","HttpException","findUser","findOne","include","model","DB","Roles","as","through","where","id","findUserById","username","findMenusById","Menus","createUser","userData","email","hashedPassword","hash","password","createUserData","create","updateUser","findByPk","update","deleteUser","destroy","Users","roles"],"mappings":"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"}